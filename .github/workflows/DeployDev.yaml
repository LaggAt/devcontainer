name: Deploy Dev to Docker Hub

on:
   push:
     branches:
      - master

jobs:
  deploy:
    name: Deploy all dev images
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Login to docker hub
        if: success()
        uses: actions-hub/docker/login@master
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_TOKEN }}

      # Build
      - name: Build image [base]
        if: success()
        run: |
          docker build --compress --no-cache -t ${GITHUB_REPOSITORY}:base -t ${GITHUB_REPOSITORY}:latest -f Base.dockerfile .

      - name: Build image [base-debian]
        if: success()
        run: |
          docker build --compress --no-cache -t ${GITHUB_REPOSITORY}:base-debian -f BaseDebian.dockerfile .

      - name: Build image [dotnet]
        if: success()
        run: |
          cd Dockerfiles || exit 1
          docker build --compress --no-cache -t ${GITHUB_REPOSITORY}:dotnet -f Dotnet.dockerfile .

      - name: Build image [netdaemon]
        if: success()
        run: |
          cd Dockerfiles || exit 1
          docker build --compress --no-cache -t ${GITHUB_REPOSITORY}:netdaemon -f Netdaemon.dockerfile .

      - name: Build image [python]
        if: success()
        run: |
          cd Dockerfiles || exit 1
          docker build --compress --no-cache -t ${GITHUB_REPOSITORY}:python -f Python.dockerfile .

      - name: Build image [integration]
        if: success()
        run: |
          cd Dockerfiles || exit 1
          docker build --compress --no-cache -t ${GITHUB_REPOSITORY}:integration -f Integration.dockerfile .

      - name: Build image [frontend]
        if: success()
        run: |
          cd Dockerfiles || exit 1
          docker build --compress --no-cache -t ${GITHUB_REPOSITORY}:frontend -f Frontend.dockerfile .

      - name: Build image [monster]
        if: success()
        run: |
          cd Dockerfiles || exit 1
          docker build --compress --no-cache -t ${GITHUB_REPOSITORY}:monster -f Monster.dockerfile .



      # Deploy
      - name: Push to docker registry [latest]
        if: success()
        uses: actions-hub/docker@master
        with:
          args: push ${GITHUB_REPOSITORY}:latest

      - name: Push to docker registry [base]
        if: success()
        uses: actions-hub/docker@master
        with:
          args: push ${GITHUB_REPOSITORY}:base

      - name: Push to docker registry [base-debian]
        if: success()
        uses: actions-hub/docker@master
        with:
          args: push ${GITHUB_REPOSITORY}:base-debian

      - name: Push to docker registry [dotnet]
        if: success()
        uses: actions-hub/docker@master
        with:
          args: push ${GITHUB_REPOSITORY}:dotnet

      - name: Push to docker registry [netdaemon]
        if: success()
        uses: actions-hub/docker@master
        with:
          args: push ${GITHUB_REPOSITORY}:netdaemon

      - name: Push to docker registry [python]
        if: success()
        uses: actions-hub/docker@master
        with:
          args: push ${GITHUB_REPOSITORY}:python

      - name: Push to docker registry [integration]
        if: success()
        uses: actions-hub/docker@master
        with:
          args: push ${GITHUB_REPOSITORY}:integration

      - name: Push to docker registry [frontend]
        if: success()
        uses: actions-hub/docker@master
        with:
          args: push ${GITHUB_REPOSITORY}:frontend

      - name: Push to docker registry [monster]
        if: success()
        uses: actions-hub/docker@master
        with:
          args: push ${GITHUB_REPOSITORY}:monster